int main(int argc, char **argv) {
   ::testing::InitGoogleTest(&argc, argv);
   return RUN_ALL_TESTS();
}


TEST(FieldTest, CustomConstructor) {
   std::vector<Point> coords = {{0, 0}, {1, 1}, {2, 2}};
   Field field(coords);
   EXPECT_EQ(field.getState(0, 0), true);
   EXPECT_EQ(field.getState(1, 1), true);
   EXPECT_EQ(field.getState(2, 2), true);
}


TEST(GameModelTest, GlobalIterationCount) {
   Game_model model("GlobalIterationModel", "345", "26", {{0, 0}, {1, 1}});
   model.computeIteration();
   EXPECT_EQ(model.getGlobIteration(), 1);
   model.computeIteration();
   EXPECT_EQ(model.getGlobIteration(), 2);
}


TEST(GameViewTest, PrintHelp) {
   Game_view view;
   testing::internal::CaptureStdout();
   view.printHelp();
   std::string output = testing::internal::GetCapturedStdout();
   EXPECT_EQ(output, " dump <filename> - сохранить вселенную в файл                           \n"
                     " tick <n=1> (и сокращенно t <n=1>) - рассчитать n (по умолчанию 1)      \n"
                     " exit - завершить игру                                                  \n"
                     " help - распечатать справку о командах                                  \n\n");
}


TEST(GameViewTest, PrintErr) {
   Game_view view;
   testing::internal::CaptureStdout();
   view.printErr("Test Error Message");
   std::string output = testing::internal::GetCapturedStdout();
   EXPECT_EQ(output, "Test Error Message\n");
}